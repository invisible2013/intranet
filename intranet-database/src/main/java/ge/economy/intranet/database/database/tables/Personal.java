/**
 * This class is generated by jOOQ
 */
package ge.economy.intranet.database.database.tables;


import ge.economy.intranet.database.converter.TimestampConverter;
import ge.economy.intranet.database.database.Keys;
import ge.economy.intranet.database.database.Public;
import ge.economy.intranet.database.database.tables.records.PersonalRecord;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Personal extends TableImpl<PersonalRecord> {

	private static final long serialVersionUID = -2064359153;

	/**
	 * The reference instance of <code>public.personal</code>
	 */
	public static final Personal PERSONAL = new Personal();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PersonalRecord> getRecordType() {
		return PersonalRecord.class;
	}

	/**
	 * The column <code>public.personal.id</code>.
	 */
	public final TableField<PersonalRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.personal.organisation_id</code>.
	 */
	public final TableField<PersonalRecord, Integer> ORGANISATION_ID = createField("organisation_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.personal.structure_id</code>.
	 */
	public final TableField<PersonalRecord, Integer> STRUCTURE_ID = createField("structure_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.personal.position_id</code>.
	 */
	public final TableField<PersonalRecord, Integer> POSITION_ID = createField("position_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.personal.first_name</code>.
	 */
	public final TableField<PersonalRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.personal.last_name</code>.
	 */
	public final TableField<PersonalRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.personal.mail</code>.
	 */
	public final TableField<PersonalRecord, String> MAIL = createField("mail", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.personal.birth_date</code>.
	 */
	public final TableField<PersonalRecord, Date> BIRTH_DATE = createField("birth_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimestampConverter());

	/**
	 * The column <code>public.personal.pid_number</code>.
	 */
	public final TableField<PersonalRecord, String> PID_NUMBER = createField("pid_number", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.personal.phone_number</code>.
	 */
	public final TableField<PersonalRecord, String> PHONE_NUMBER = createField("phone_number", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.personal.address</code>.
	 */
	public final TableField<PersonalRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.personal.group_id</code>.
	 */
	public final TableField<PersonalRecord, Integer> GROUP_ID = createField("group_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.personal.status_id</code>.
	 */
	public final TableField<PersonalRecord, Integer> STATUS_ID = createField("status_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>public.personal</code> table reference
	 */
	public Personal() {
		this("personal", null);
	}

	/**
	 * Create an aliased <code>public.personal</code> table reference
	 */
	public Personal(String alias) {
		this(alias, PERSONAL);
	}

	private Personal(String alias, Table<PersonalRecord> aliased) {
		this(alias, aliased, null);
	}

	private Personal(String alias, Table<PersonalRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<PersonalRecord, Integer> getIdentity() {
		return Keys.IDENTITY_PERSONAL;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PersonalRecord> getPrimaryKey() {
		return Keys.PERSONAL_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PersonalRecord>> getKeys() {
		return Arrays.<UniqueKey<PersonalRecord>>asList(Keys.PERSONAL_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Personal as(String alias) {
		return new Personal(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Personal rename(String name) {
		return new Personal(name, null);
	}
}
